install.packages("kernsmooth")
install.packages('KernSmooth')
load('KernSmooth')
q()
install.packages('swirl')
library(swirl)
swirl()
install_from_swirl(R Programming)
install_from_swirl("R Programming")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
c(1,2,3,4)+c(0,10,100)
c(1,2,3,4)+c(0,10,1000)
z*2+1000
my_div
q()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <=10
5 !=7
!(5==7)
FALSE&FALSE
TRUE & C(TRUE,FALSE,TRUE)
TRUE & C(TRUE, FALSE, TRUE)
TRUE & c(TRUE, FALSE, TRUE)
TRUE & c(TRUE, FALSE, false)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 5)
which(ints > 7)
any(ints <0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(stderr,c(1.4,3.6,7.9,8.8))
evaluate('stderr',c(1.4,3.6,7.9,8.8))
help
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
paste
?paste
paste("Programming","is","fun!")
submit()
telegram("Hello","world!")
submit()
submit()
mad_libs("1","2","3")
submit()
'I' %p% 'love' %p% 'R!'
q()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flas$orange)
sum(flags$orange)
flags_colors <- flags[,11:17]
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
lapply(flags,unique)
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lappy(unique_vals, function(elem) elem[2])
lapply(unique_vals, function(elem) elem[2])
q()
getwd()
setwd("~/Coursera")
setwd("~/Coursera/R Programming")
dir()
setwd("~/Coursera/Data Science")
dir()
setwd("~/Coursera/Data Science/R Programming")
dir()
source(complete.R)
source('complete.R')
source('corr.R')
directory <- "specdata"
setwd(directory)
getwd()
setwd(directory)
setwd("~/Coursera/Data Science/R Programming")
corr("specdata",150)
corr("specdata",150)
source('~/Coursera/Data Science/R Programming/complete.R')
source('~/Coursera/Data Science/R Programming/corr.R')
corr("specdata",150)
getwd() == "specdata"
source('~/Coursera/Data Science/R Programming/complete.R')
source('~/Coursera/Data Science/R Programming/corr.R')
corr("specdata",150)
source('~/Coursera/Data Science/R Programming/pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
library(swirl)
swirl()
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags, class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$lanmass,mean)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
library(datasets)
data("iris")
tapply(iris$Sepal.Length,iris$Species,mean)
head(irus)
head(iris)
?apply
apply(iris,1,mean)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
data(mtcars)
tapply(mtcars$mpg,mtcars$cyl,mean)
sapply(mtcars,cyl,mean)
lapply(mtcars,mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
apply(mtcars,2,neab)
apply(mtcars,2,mean)
with(mtcars,tapply(mpg,cyl,mean))
hp <- tapply(mtcars$hp,mtcars$cyl,mean)
hp
abs(hp[3]-hp[1])
round(abs(hp[3]-hp[1]))
debug(ls)
ls()
0
cancel
q()
